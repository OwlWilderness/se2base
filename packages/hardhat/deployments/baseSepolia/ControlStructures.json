{
  "address": "0xD16c6d7DC8e7B35376D881F13A2Cceb992005D73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "AfterHours",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "doNotDisturb",
      "outputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "fizzBuzz",
      "outputs": [
        {
          "internalType": "string",
          "name": "fizzBuzz",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f77a8b4216ec2cbae378748617a1289f897844c2e24e7ff83e2a2c39bba3f48",
  "receipt": {
    "to": null,
    "from": "0xe615999EF19775E8EE6FEc3dbe9ee4ec224B445a",
    "contractAddress": "0xD16c6d7DC8e7B35376D881F13A2Cceb992005D73",
    "transactionIndex": 7,
    "gasUsed": "245994",
    "logsBloom": "0x
    "blockHash": "0x52884ccebc3f29785b9f3d6cf17456729a49f1539fc737a5f0b9992c86f00e55",
    "transactionHash": "0x5f77a8b4216ec2cbae378748617a1289f897844c2e24e7ff83e2a2c39bba3f48",
    "logs": [],
    "blockNumber": 7730089,
    "cumulativeGasUsed": "5517201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "80d0a758575ee2ea5354d7c0be9026e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"AfterHours\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"doNotDisturb\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"fizzBuzz\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"fizzBuzz\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"tekh.eth\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"base camp exercise 1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ControlStructures.sol\":\"ControlStructures\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ControlStructures.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n ///@author tekh.eth\\n ///@notice base camp exercise 1\\n\\ncontract ControlStructures {\\n    function fizzBuzz(uint _number) public pure returns (string memory fizzBuzz){\\n    /*\\n    Create a function called fizzBuzz that accepts a uint called _number and returns a string memory. The function should return:\\n\\n    \\\"Fizz\\\" if the _number is divisible by 3\\n    \\\"Buzz\\\" if the _number is divisible by 5\\n    \\\"FizzBuzz\\\" if the _number is divisible by 3 and 5\\n    \\\"Splat\\\" if none of the above conditions are true\\n    */\\n        bool fizz = false;\\n        bool buzz = false;\\n       \\n        if(_number % 3 == 0){\\n            fizz = true;\\n        } \\n\\n        if(_number % 5 == 0){\\n            buzz = true;\\n        }\\n\\n        if(fizz && buzz ){\\n            return \\\"FizzBuzz\\\";\\n        } else if (fizz) {\\n            return \\\"Fizz\\\";\\n        } else if (buzz) {\\n            return \\\"Buzz\\\";\\n        } else {\\n            return \\\"Splat\\\";\\n        }\\n    }\\n\\n    /*\\n    Create a function called doNotDisturb that accepts a uint called _time,\\n     and returns a string memory. It should adhere to the following properties:\\n\\n    If _time is greater than or equal to 2400, trigger a panic\\n    If _time is greater than 2200 or less than 800, revert with a custom error of AfterHours, \\n    and include the time provided\\n    If _time is between 1200 and 1299, revert with a string message \\\"At lunch!\\\"\\n    If _time is between 800 and 1199, return \\\"Morning!\\\"\\n    If _time is between 1300 and 1799, return \\\"Afternoon!\\\"\\n    If _time is between 1800 and 2200, return \\\"Evening!\\\"\\n\\n    //this is a little weird as the time is 99 and not 59 but as an exercise...\\n    */\\n\\n    error AfterHours(uint time);\\n\\n    function doNotDisturb (uint _time) public pure returns (string memory message){\\n        assert(_time < 2400);\\n\\n        if(_time > 2200 || _time < 800){\\n            revert AfterHours(_time);\\n        }\\n\\n        if(_time >= 1200 && _time < 1300){\\n            revert (\\\"At Lunch!\\\");\\n        }\\n\\n        if(_time >= 800 && _time < 1200){\\n            return \\\"Morning!\\\";\\n        }\\n\\n        if(_time >= 1300 && _time < 1800){\\n            return \\\"Afternoon!\\\";\\n        }\\n\\n        if(_time >= 1800 && _time <= 2200){\\n            return \\\"Evening!\\\";\\n        }\\n    }\\n}\",\"keccak256\":\"0xb72c411aee6169f5176bb7e68f690be92fa92f0b63191ff0443f0dad77d5db97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061037c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063440c93e21461003b578063e655b7bb14610064575b600080fd5b61004e6100493660046102a7565b610077565b60405161005b91906102c0565b60405180910390f35b61004e6100723660046102a7565b610155565b606060008061008760038561030e565b60000361009357600191505b61009e60058561030e565b6000036100a9575060015b8180156100b35750805b156100df5750506040805180820190915260088152672334bd3d213abd3d60c11b602082015292915050565b81156101085750506040805180820190915260048152632334bd3d60e11b602082015292915050565b8015610131575050604080518082019091526004815263213abd3d60e11b602082015292915050565b505060408051808201909152600581526414dc1b185d60da1b602082015292915050565b6060610960821061016857610168610330565b610898821180610179575061032082105b1561019f5760405163525fb80f60e11b8152600481018390526024015b60405180910390fd5b6104b082101580156101b2575061051482105b156101eb5760405162461bcd60e51b81526020600482015260096024820152684174204c756e63682160b81b6044820152606401610196565b61032082101580156101fe57506104b082105b156102275750506040805180820190915260088152674d6f726e696e672160c01b602082015290565b610514821015801561023a575061070882105b1561026557505060408051808201909152600a81526941667465726e6f6f6e2160b01b602082015290565b610708821015801561027957506108988211155b156102a25750506040805180820190915260088152674576656e696e672160c01b602082015290565b919050565b6000602082840312156102b957600080fd5b5035919050565b600060208083528351808285015260005b818110156102ed578581018301518582016040015282016102d1565b506000604082860101526040601f19601f8301168501019250505092915050565b60008261032b57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052600160045260246000fdfea26469706673582212208db08e276a1dfeedee2843ff6923cfc3d28436e6b7eb1b052c6a06a8ae472ea364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063440c93e21461003b578063e655b7bb14610064575b600080fd5b61004e6100493660046102a7565b610077565b60405161005b91906102c0565b60405180910390f35b61004e6100723660046102a7565b610155565b606060008061008760038561030e565b60000361009357600191505b61009e60058561030e565b6000036100a9575060015b8180156100b35750805b156100df5750506040805180820190915260088152672334bd3d213abd3d60c11b602082015292915050565b81156101085750506040805180820190915260048152632334bd3d60e11b602082015292915050565b8015610131575050604080518082019091526004815263213abd3d60e11b602082015292915050565b505060408051808201909152600581526414dc1b185d60da1b602082015292915050565b6060610960821061016857610168610330565b610898821180610179575061032082105b1561019f5760405163525fb80f60e11b8152600481018390526024015b60405180910390fd5b6104b082101580156101b2575061051482105b156101eb5760405162461bcd60e51b81526020600482015260096024820152684174204c756e63682160b81b6044820152606401610196565b61032082101580156101fe57506104b082105b156102275750506040805180820190915260088152674d6f726e696e672160c01b602082015290565b610514821015801561023a575061070882105b1561026557505060408051808201909152600a81526941667465726e6f6f6e2160b01b602082015290565b610708821015801561027957506108988211155b156102a25750506040805180820190915260088152674576656e696e672160c01b602082015290565b919050565b6000602082840312156102b957600080fd5b5035919050565b600060208083528351808285015260005b818110156102ed578581018301518582016040015282016102d1565b506000604082860101526040601f19601f8301168501019250505092915050565b60008261032b57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052600160045260246000fdfea26469706673582212208db08e276a1dfeedee2843ff6923cfc3d28436e6b7eb1b052c6a06a8ae472ea364736f6c63430008110033",
  "devdoc": {
    "author": "tekh.eth",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "base camp exercise 1",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}